<% content_for :title, @item.persisted? ? @item.name : "New Item" %>

<div class="container mt-5">
  <div class="row justify-content-center">
    <div class="col-lg-10">
      <div class="bg-light p-5 rounded-3 mb-4 shadow position-relative">

        <!-- Preview box -->
        <div class="bg-white p-4 mb-4 shadow" style="max-width: 375px; border-radius: 0;">
          <div class="px-3 py-2">
            <h1 class="mb-2 h4" id="preview-item-name">
              <%= @item.persisted? ? @item.name : "Item Name" %>
            </h1>
            <p class="small mb-2" id="preview-description">
              <% if @item.description.present? %>
                <%= @item.description %>
              <% else %>
                Item description and all the trimmings.
              <% end %>
              <% if @item.persisted? && (@item.credit_price.present? || @item.cash_price.present?) %>
                <%= number_to_currency(@item.credit_price) %> (<%= number_to_currency(@item.cash_price) %>)
              <% else %>
                $0.00 (---)
              <% end %>
            </p>
          </div>
        </div>

        <!-- Category dropdown -->
        <div class="position-absolute top-0 end-0 mt-5 me-4" style="z-index: 1; width: 300px; left: 90%; transform: translateX(-90%);">
          <div class="mb-2 text-center">
            <h2 id="category-header"><%= @item.category.present? ? @item.category.name.upcase : "SELECT CATEGORY" %></h2>
          </div>

          <div class="dropdown" style="width: 100%;">
            <button class="btn btn-outline-secondary dropdown-toggle w-100 text-start" type="button" id="categoryDropdown" data-bs-toggle="dropdown" aria-expanded="false">
              <%= @item.category.present? ? @item.category.name : "Select Category" %>
            </button>
            <ul class="dropdown-menu w-100" aria-labelledby="categoryDropdown">
              <% Category.all.order(:name).each do |category| %>
                <li>
                  <%= link_to category.name, "#", class: "dropdown-item", data: { category_id: category.id } %>
                </li>
              <% end %>
            </ul>
          </div>
          <% if @item.errors[:category_id].any? %>
            <div class="text-danger small mt-1">
              <%= @item.errors[:category_id].first %>
            </div>
          <% end %>
        </div>

        <!-- Form start -->
        <%= form_with(model: @item, id: "item-form", local: true) do |form| %>
          <% if @item.errors.any? %>
            <div class="alert alert-danger">
              <h2><%= pluralize(@item.errors.count, "error") %> prohibited saving:</h2>
              <ul>
                <% @item.errors.each do |error| %>
                  <li><%= error.full_message %></li>
                <% end %>
              </ul>
            </div>
          <% end %>

          <%= form.hidden_field :category_id, id: "category-field", required: true %>

          <div class="row mb-3">
            <div class="col-md-6">
              <%= form.label :name, class: "form-label" %>
              <%= form.text_field :name, 
                  class: "form-control form-control-lg",
                  id: "item-name-input",
                  value: @item.name,
                  placeholder: "Enter Item Name" %>
            </div>
          </div>

          <div class="row mb-3">
            <div class="col">
              <%= form.label :description, class: "form-label" %>
              <%= form.text_area :description, 
                  class: "form-control", 
                  id: "item-description-input",
                  rows: 3,
                  value: @item.description,
                  placeholder: "Enter item description" %>
            </div>
          </div>

          <div class="row mb-4">
            <div class="col-md-6">
              <div class="card mb-3">
                <div class="card-header bg-secondary text-white">
                  <span class="form-label mb-0">Calculated Credit Price</span>
                </div>
                <div class="card-body">
                  <input type="text" 
                         class="form-control form-control-lg text-end"
                         value="<%= number_to_currency(@item.credit_price || 0, unit: '') %>"
                         readonly
                         id="credit-price-display">
                </div>
              </div>
            </div>

            <div class="col-md-6">
              <div class="card mb-3">
                <div class="card-header bg-warning text-black">
                  <%= form.label :cash_price, "Cash Price", class: "form-label mb-0" %>
                </div>
                <div class="card-body">
                  <%= form.text_field :cash_price,
                    value: number_to_currency(@item.cash_price || 0, unit: ''), 
                    class: "form-control form-control-lg text-end currency-input",
                    inputmode: "decimal",
                    id: "cash-price-input",
                    onclick: "this.select();" %>
                </div>
              </div>
            </div> 
          </div>      

          <%= form.hidden_field :credit_price, id: "credit-price-field" %>

          <div class="d-flex gap-4">
            <%= form.submit @item.persisted? ? "Update Item" : "Create Item", class: "btn btn-warning" %>
            
            <% if @item.persisted? %>
              <%= link_to "New Item", new_item_path, class: "btn btn-outline-primary px-4" %>
            <% end %>
          
            <%= link_to "Back to Items", items_path, class: "btn btn-outline-secondary px-4",
                data: { confirm: @item.persisted? ? nil : "Are you sure you want to cancel? Any unsaved changes will be lost." } %>
            <%= link_to "Back to Menus", menus_path, class: "btn btn-outline-secondary px-4" %> 
          </div>
        <% end %>
        
        <% if @item.persisted? %>
          <div class="mt-3 text-end">
            <%= button_to "Delete Item", @item,
                          method: :delete,
                          form: { 
                            class: "delete-form",
                            data: { turbo_confirm: "Are you sure?" } 
                          },
                          class: "btn btn-danger" %>
          </div>
        <% end %>
      </div>
    </div>
  </div>
</div>

<style type="text/css">
  
  .accordion {
    overflow: hidden;
    border-radius: 0.5rem !important;
    border: 1px solid #dee2e6 !important;
  }

  .accordion-item {
    border: 0 !important;
    margin: 0 !important;
  }

  .accordion-item:first-child .accordion-button {
    border-top-left-radius: 0.5rem !important;
    border-top-right-radius: 0.5rem !important;
  }

  .accordion-item:last-child .accordion-collapse {
    border-bottom-left-radius: 0.5rem !important;
    border-bottom-right-radius: 0.5rem !important;
  }

  /* Add to your stylesheet */
  .category-dropdown-container {
    position: absolute;
    top: 0;
    right: 0;
    z-index: 1;
    width: 300px;
    margin-top: 1rem;
    margin-right: 1rem;
    left: 90%;
    transform: translateX(-90%);
  }

  .preview-box {
    max-width: 375px;
    border-radius: 0;
  }

  .is-invalid {
    border-color: #dc3545 !important;
  }

  .is-invalid + .dropdown-menu {
    border-color: #dc3545 !important;
  }

</style>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    // Category dropdown handling
    document.querySelectorAll('.dropdown-item[data-category-id]').forEach(item => {
      item.addEventListener('click', function(e) {
        e.preventDefault();
        const categoryId = this.getAttribute('data-category-id');
        const categoryName = this.textContent;
        
        // Update the dropdown button text
        document.getElementById('categoryDropdown').textContent = categoryName;
        
        // Update the hidden field value
        document.getElementById('category-field').value = categoryId;
        
        // Update the category header
        document.getElementById('category-header').textContent = categoryName.toUpperCase();
        
        // Remove invalid class when category is selected
        document.getElementById('categoryDropdown').classList.remove('is-invalid');
      });
    });

    // Form submission validation
    document.getElementById('item-form')?.addEventListener('submit', function(e) {
      const categoryField = document.getElementById('category-field');
      if (!categoryField.value) {
        e.preventDefault();
        alert('Please select a category');
        // Highlight the dropdown to draw attention
        document.getElementById('categoryDropdown').classList.add('is-invalid');
        document.getElementById('categoryDropdown').focus();
      }
    });

    // Initialize the hidden field if there's a preselected category
    const initialCategory = document.getElementById('categoryDropdown').textContent.trim();
    if (initialCategory !== 'Select Category') {
      const initialItem = Array.from(document.querySelectorAll('.dropdown-item'))
        .find(item => item.textContent.trim() === initialCategory);
      if (initialItem) {
        document.getElementById('category-field').value = initialItem.getAttribute('data-category-id');
      }
    }

    // Rest of your existing price calculation code
    const cashPriceInput = document.getElementById('cash-price-input');
    let rawCashValue = parseFloat(cashPriceInput.value.replace(/[^0-9.]/g, '')) || 0;
    
    cashPriceInput.addEventListener('input', function(e) {
      const inputValue = this.value.replace(/[^0-9.]/g, '');
      rawCashValue = inputValue ? parseFloat(inputValue) : 0;
      const creditValue = rawCashValue ? (rawCashValue / 0.97).toFixed(2) : '0.00';
      
      document.getElementById('credit-price-display').value = creditValue;
      document.getElementById('credit-price-field').value = creditValue;
      updatePreviewDescription();
    });

    cashPriceInput.addEventListener('blur', function(e) {
      if (rawCashValue > 0) {
        this.value = rawCashValue.toLocaleString('en-US', {
          style: 'decimal',
          minimumFractionDigits: 2,
          maximumFractionDigits: 2
        });
      } else {
        this.value = '';
        rawCashValue = 0;
      }
    });

    cashPriceInput.addEventListener('focus', function(e) {
      this.value = rawCashValue > 0 ? rawCashValue.toString() : '';
    });

    document.getElementById('item-name-input')?.addEventListener('input', function(e) {
      document.getElementById('preview-item-name').textContent = this.value || 'Item Name';
    });

    document.getElementById('item-description-input')?.addEventListener('input', function(e) {
      updatePreviewDescription();
    });

    function updatePreviewDescription() {
      const creditValue = rawCashValue ? (rawCashValue / 0.97).toFixed(2) : '0.00';
      const description = document.getElementById('item-description-input').value || 'Item description and all the trimmings.';
      document.getElementById('preview-description').innerHTML = 
        `${description} $${creditValue} ($${rawCashValue ? rawCashValue.toFixed(2) : '0.00'})`;
    }

    updatePreviewDescription();
  });

  // More robust price handling
  function formatCurrency(value) {
    return parseFloat(value || 0).toLocaleString('en-US', {
      style: 'decimal',
      minimumFractionDigits: 2,
      maximumFractionDigits: 2
    });
  }
</script>
