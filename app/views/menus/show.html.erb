<!-- app/views/menus/show.html.erb -->
<div class="container mt-4">
  <div class="card shadow-sm">
    <div class="card-header bg-white text-center">
      <h1 class="display-4 mb-1"><%= @menu.title %></h1>
      <p class="text-muted"><%= @menu.date.strftime("%A, %B %d, %Y") %></p>
      <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#addItemModal">
        Add Item to Menu
      </button>
    </div>
    
    <div class="card-body">
      <% @menu_categories.each do |menu_category| %>
        <% if menu_category.menu_items.any? %>
          <div class="menu-category mb-5" id="category-<%= menu_category.id %>">
            <h2 class="text-center"><%= menu_category.category.name.upcase %></h2>
            
            <% menu_category.menu_items.each do |menu_item| %>
              <div class="menu-item mb-4 text-center position-relative">
                <h4><%= menu_item.item.name %></h4>
                <div class="item-details">
                  <% if menu_item.item.description.present? %>
                    <p class="text-muted mb-1">
                      <%= menu_item.item.description %>. 
                      $<%= sprintf('%.2f', menu_item.item.credit_price) %>
                      (<%= sprintf('%.2f', menu_item.item.cash_price) %>)
                    </p>
                  <% else %>
                    <p class="text-muted mb-1">
                      $<%= sprintf('%.2f', menu_item.item.credit_price) %>
                      (<%= sprintf('%.2f', menu_item.item.cash_price) %>)
                    </p>
                  <% end %>
                </div>
                <%= link_to menu_item_path(menu_item), 
                    method: :delete,
                    data: { 
                      turbo_method: :delete,
                      turbo_confirm: "Are you sure?"
                    },
                    class: 'remove-item-btn position-absolute top-0 end-0 mt-1 me-2' do %>
                  <span class="text-danger">&times;</span>
                <% end %>
              </div>
            <% end %>
          </div>
        <% end %>
      <% end %>
    </div>
  </div>
</div>

<!-- Add Item Modal -->
<div class="modal fade" id="addItemModal" tabindex="-1" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">Add Items to Menu</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <div class="mb-3">
          <input type="text" id="itemSearch" class="form-control" placeholder="Search items..." autocomplete="off">
          <div id="searchResults" class="mt-2"></div>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- Modal Search Section -->
<script>
  document.addEventListener('DOMContentLoaded', function() {
    const searchInput = document.getElementById('itemSearch');
    const searchResults = document.getElementById('searchResults');
    const modal = new bootstrap.Modal(document.getElementById('addItemModal'));

    // Search functionality
    searchInput.addEventListener('input', debounce(function() {
      performSearch(this.value.trim());
    }, 300));

    function performSearch(query) {
      if (query.length < 3) {
        searchResults.innerHTML = '<div class="p-2 text-muted">Type at least 3 characters</div>';
        return;
      }

      searchResults.innerHTML = '<div class="p-2 text-muted">Searching...</div>';

      fetch(`/items/search?q=${encodeURIComponent(query)}`)
        .then(response => {
          if (!response.ok) throw new Error('Network response was not ok');
          return response.json();
        })
        .then(data => {
          if (data.error) throw new Error(data.error);
          displayResults(data.items || []);
        })
        .catch(error => {
          console.error('Search error:', error);
          searchResults.innerHTML = `<div class="p-2 text-danger">Error: ${error.message}</div>`;
        });
    }

    function displayResults(items) {
      if (items.length === 0) {
        searchResults.innerHTML = '<div class="p-2 text-muted">No items found</div>';
        return;
      }

      searchResults.innerHTML = '';
      items.forEach(item => {
        const result = document.createElement('div');
        result.className = 'search-result p-2 border-bottom';
        result.innerHTML = `
          <div class="d-flex justify-content-between align-items-center">
            <div>
              <strong>${escapeHtml(item.name)}</strong>
              <div class="text-muted small">
                ${item.description ? escapeHtml(item.description) + '. ' : ''}
                $${parseFloat(item.credit_price || 0).toFixed(2)}
                ($${parseFloat(item.cash_price || 0).toFixed(2)})
              </div>
            </div>
            <button class="btn btn-sm btn-primary add-item-btn"
                    data-item-id="${item.id}"
                    data-category-id="${item.category_id}">
              Add
            </button>
          </div>
        `;
        searchResults.appendChild(result);

        // Add event listener to the button
        result.querySelector('.add-item-btn').addEventListener('click', function() {
          const itemId = this.getAttribute('data-item-id');
          const categoryId = this.getAttribute('data-category-id');
          addItemToMenu(itemId, categoryId);
        });
      });
    }

    function addItemToMenu(itemId, categoryId) {
      fetch('/menu_items', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content
        },
        body: JSON.stringify({
          menu_item: {
            menu_id: <%= @menu.id %>,
            item_id: itemId,
            menu_category_id: categoryId
          }
        })
      })
      .then(response => response.json())
      .then(data => {
        if (data.success) {
          // Append the new item to its category section
          const categorySection = document.querySelector(`#category-${categoryId}`);
          if (categorySection) {
            categorySection.insertAdjacentHTML('beforeend', data.html);
          } else {
            window.location.reload(); // Fallback if category section not found
          }
        } else {
          alert('Error: ' + data.errors.join(', '));
        }
      })
      .catch(error => {
        console.error('Error:', error);
        alert('Failed to add item');
      });
    }

    // Helper functions
    function debounce(func, wait) {
      let timeout;
      return function() {
        const context = this, args = arguments;
        clearTimeout(timeout);
        timeout = setTimeout(() => func.apply(context, args), wait);
      };
    }

    function escapeHtml(unsafe) {
      return unsafe
        .replace(/&/g, "&amp;")
        .replace(/</g, "&lt;")
        .replace(/>/g, "&gt;")
        .replace(/"/g, "&quot;")
        .replace(/'/g, "&#039;");
    }
  });
</script>